module uart_rx #(parameter BAUDRATE = 115200, CLK_FREQ = 12000000)(
    input  wire clk,
    input  wire rst,
    input  wire rx,
    output reg  data_ready,
    output reg [7:0] data_byte
);

// -- UART Receiver Logic Here --

// This is a simple example; for a robust design, use an existing open-source UART core.

reg [3:0] state = 0;
reg [7:0] rx_shift = 0;
reg [12:0] clk_cnt = 0;

parameter IDLE=0, START=1, DATA=2, STOP=3;

always @(posedge clk or posedge rst) begin
    if (rst) begin
        state <= 0;
        data_ready <= 0;
        rx_shift <= 0;
        data_byte <= 0;
        clk_cnt <= 0;
    end else begin
        case (state)
        IDLE: begin
            data_ready <= 0;
            if (!rx) begin  // Start bit detected
                clk_cnt <= CLK_FREQ / BAUDRATE / 2;
                state <= START;
            end
        end
        START: begin
            if (clk_cnt == 0) begin
                clk_cnt <= CLK_FREQ / BAUDRATE - 1;
                state <= DATA;
            end else clk_cnt <= clk_cnt - 1;
        end
        DATA: begin
            rx_shift <= {rx, rx_shift[7:1]};
            if (clk_cnt == 0) begin
                clk_cnt <= CLK_FREQ / BAUDRATE - 1;
                if (&rx_shift == 1) state <= STOP;
            end
            else clk_cnt <= clk_cnt - 1;
        end
        STOP: begin
            data_byte <= rx_shift;
            data_ready <= 1;
            state <= IDLE;
        end
        endcase
    end
end

endmodule

